{"version":3,"sources":["webpack:///./node_modules/.pnpm/react-share@4.3.1_react@16.14.0/node_modules/react-share/es/PinterestShareButton.js","webpack:///./src/templates/blog-post.tsx","webpack:///./src/components/PostCard/postCard.style.tsx","webpack:///./src/components/PostCard/postCard.tsx"],"names":["createShareButton","url","_a","media","description","assert","objectToGetParams","props","windowWidth","windowHeight","pageQuery","BlogPostTemplate","post","data","markdownRemark","edges","allMarkdownRemark","title","frontmatter","slug","fields","siteUrl","site","siteMetadata","shareUrl","urljoin","disqusConfig","shortname","process","config","identifier","excerpt","date","preview","cover","childImageSharp","fluid","html","tags","className","map","tag","index","key","to","FacebookShareButton","quote","TwitterShareButton","publicURL","RedditShareButton","Sidebar","length","node","placeholderColors","setColor","Math","floor","random","image","placeholderBG","PostCardWrapper","styled","div","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","h2","Excerpt","p","PostTags","PostCard","imageType","addAllClasses","push","join","alt","backgroundColor","fixed","dangerouslySetInnerHTML","__html","defaultProps"],"mappings":"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","file":"component---src-templates-blog-post-tsx-625fc9cb4d8d83e0f68b.js","sourcesContent":["import assert from './utils/assert';\nimport objectToGetParams from './utils/objectToGetParams';\nimport createShareButton from './hocs/createShareButton';\n\nfunction pinterestLink(url, _a) {\n  var media = _a.media,\n      description = _a.description;\n  assert(url, 'pinterest.url');\n  assert(media, 'pinterest.media');\n  return 'https://pinterest.com/pin/create/button/' + objectToGetParams({\n    url: url,\n    media: media,\n    description: description\n  });\n}\n\nvar PinterestShareButton = createShareButton('pinterest', pinterestLink, function (props) {\n  return {\n    media: props.media,\n    description: props.description\n  };\n}, {\n  windowWidth: 1000,\n  windowHeight: 730\n});\nexport default PinterestShareButton;","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport _ from 'lodash';\nimport urljoin from 'url-join';\nimport { DiscussionEmbed } from 'disqus-react';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport PostCard from '../components/PostCard/postCard';\nimport PostDetails from '../components/PostDetails/postDetails';\nimport Sidebar from '../containers/Sidebar';\nimport {\n  FacebookShareButton,\n  TwitterShareButton,\n  PinterestShareButton,\n  RedditShareButton\n} from 'react-share';\nimport {\n  IoLogoFacebook,\n  IoLogoTwitter,\n  IoLogoPinterest,\n  IoLogoReddit\n} from 'react-icons/io';\nimport {\n  BlogPostDetailsWrapper,\n  RelatedPostWrapper,\n  RelatedPostItems,\n  RelatedPostTitle,\n  RelatedPostItem,\n  BlogPostFooter,\n  PostShare,\n  PostTags,\n  BlogPostComment,\n  BlogDetailsContent\n} from './templates.style';\n\nconst BlogPostTemplate = (props: any) => {\n  const post = props.data.markdownRemark;\n  const { edges } = props.data.allMarkdownRemark;\n  const title = post.frontmatter.title;\n  const slug = post.fields.slug;\n  const siteUrl = props.data.site.siteMetadata.siteUrl;\n  const shareUrl = urljoin(siteUrl, slug);\n\n  const disqusConfig = {\n    shortname: process.env.DISQUS_NAME,\n    config: { identifier: slug, title }\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <BlogPostDetailsWrapper>\n        <BlogDetailsContent>\n          <PostDetails\n            title={post.frontmatter.title}\n            date={post.frontmatter.date}\n            preview={\n              post.frontmatter.cover == null\n                ? null\n                : post.frontmatter.cover.childImageSharp.fluid\n            }\n            description={post.html}\n          />\n\n          <BlogPostFooter>\n            {post.frontmatter.tags == null ? null : (\n              <PostTags className=\"post_tags\">\n                {post.frontmatter.tags.map((tag: string, index: number) => (\n                  <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                    {`#${tag}`}\n                  </Link>\n                ))}\n              </PostTags>\n            )}\n            <PostShare>\n              <span>Share This:</span>\n              <FacebookShareButton url={shareUrl} quote={post.excerpt}>\n                <IoLogoFacebook />\n              </FacebookShareButton>\n              <TwitterShareButton url={shareUrl} title={title}>\n                <IoLogoTwitter />\n              </TwitterShareButton>\n              <PinterestShareButton\n                url={shareUrl}\n                media={urljoin(siteUrl, post.frontmatter.cover.publicURL)}\n              >\n                <IoLogoPinterest />\n              </PinterestShareButton>\n              <RedditShareButton\n                url={shareUrl}\n                title={`${post.frontmatter.title}`}\n              >\n                <IoLogoReddit />\n              </RedditShareButton>\n            </PostShare>\n          </BlogPostFooter>\n\n          <BlogPostComment>\n            <DiscussionEmbed {...disqusConfig} />\n          </BlogPostComment>\n        </BlogDetailsContent>\n        <Sidebar />\n      </BlogPostDetailsWrapper>\n\n      {edges.length !== 0 && (\n        <RelatedPostWrapper>\n          <RelatedPostTitle>Related Posts</RelatedPostTitle>\n          <RelatedPostItems>\n            {edges.map(({ node }: any) => {\n              //Random Placeholder Color\n              const placeholderColors = [\n                '#55efc4',\n                '#81ecec',\n                '#74b9ff',\n                '#a29bfe',\n                '#ffeaa7',\n                '#fab1a0',\n                '#e17055',\n                '#0984e3',\n                '#badc58',\n                '#c7ecee'\n              ];\n              const setColor =\n                placeholderColors[\n                  Math.floor(Math.random() * placeholderColors.length)\n                ];\n              return (\n                <RelatedPostItem key={node.fields.slug}>\n                  <PostCard\n                    title={node.frontmatter.title || node.fields.slug}\n                    url={node.fields.slug}\n                    image={\n                      node.frontmatter.cover == null\n                        ? null\n                        : node.frontmatter.cover.childImageSharp.fluid\n                    }\n                    tags={node.frontmatter.tags}\n                    placeholderBG={setColor}\n                  />\n                </RelatedPostItem>\n              );\n            })}\n          </RelatedPostItems>\n        </RelatedPostWrapper>\n      )}\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $tag: [String!]) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"DD MMM, YYYY\")\n        description\n        tags\n        cover {\n          publicURL\n          childImageSharp {\n            fluid(maxWidth: 1170, quality: 100) {\n              tracedSVG\n              srcWebp\n              srcSetWebp\n              srcSet\n              src\n              sizes\n              presentationWidth\n              presentationHeight\n              originalName\n              originalImg\n              base64\n              aspectRatio\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 3\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: $tag } }\n        fields: { slug: { ne: $slug } }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            cover {\n              publicURL\n              childImageSharp {\n                fluid(maxWidth: 370, maxHeight: 220, quality: 90) {\n                  tracedSVG\n                  srcWebp\n                  srcSetWebp\n                  srcSet\n                  src\n                  sizes\n                  presentationWidth\n                  presentationHeight\n                  originalName\n                  originalImg\n                  base64\n                  aspectRatio\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\nimport { themeGet } from 'styled-system';\n\nexport const PostCardWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PostPreview = styled.div`\n  margin-bottom: 45px;\n  position: relative;\n  img {\n    border-radius: 3px;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    background-color: #757575;\n    bottom: 0;\n    left: 10%;\n    filter: blur(15px);\n  }\n`;\n\nexport const PostDetails = styled.div`\n  display: flex;\n`;\n\nexport const PostDate = styled.div`\n  font-size: 90px;\n  font-weight: 700;\n  text-align: center;\n  padding: 30px 35px 15px 35px;\n  margin-right: 20px;\n  line-height: 1;\n  color: ${themeGet('colors.textColor', '#292929')};\n  @media (max-width: 1200px) {\n    font-size: 70px;\n    padding: 25px 25px 15px 25px;\n    margin-right: 35px;\n  }\n  @media (max-width: 990px) {\n    font-size: 56px;\n    padding: 20px 20px 15px 20px;\n    margin-right: 25px;\n  }\n  @media (max-width: 575px) {\n    display: none;\n  }\n\n  > span {\n    font-size: 13px;\n    font-weight: 400;\n    display: block;\n    margin-top: 12px;\n    text-transform: uppercase;\n  }\n`;\n\nexport const PostContent = styled.div`\n  align-self: center;\n`;\n\nexport const PostTitle = styled.h2`\n  font-size: 30px;\n  font-weight: 700;\n  color: ${themeGet('colors.textColor', '#292929')};\n  line-height: 1.53;\n  margin-bottom: 10px;\n  a {\n    color: ${themeGet('colors.textColor', '#292929')};\n  }\n  @media (max-width: 1200px) {\n    font-size: 26px;\n  }\n  @media (max-width: 990px) {\n    font-size: 21px;\n    margin-bottom: 12px;\n  }\n  @media (max-width: 575px) {\n    font-size: 20px;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Excerpt = styled.p`\n  font-size: ${themeGet('fontSizes.3', '15')}px;\n  color: ${themeGet('textColor', '#292929')};\n  font-weight: 400;\n  line-height: 2;\n  margin-bottom: 0;\n  @media (max-width: 990px) {\n    font-size: 14px;\n  }\n`;\n\nexport const PostTags = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-top: 15px;\n\n  a {\n    display: block;\n    margin-right: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${themeGet('primary', '#D10068')};\n    @media (max-width: 990px) {\n      font-size: 13px;\n      margin-right: 25px;\n    }\n  }\n`;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport _ from 'lodash';\nimport Img from 'gatsby-image';\nimport {\n  PostCardWrapper,\n  PostPreview,\n  PostDetails,\n  PostDate,\n  PostTitle,\n  Excerpt,\n  PostContent,\n  PostTags\n} from './postCard.style';\n\ninterface PostCardProps {\n  image?: any;\n  title: string;\n  description?: string;\n  url: string;\n  date?: string;\n  tags?: [];\n  className?: string;\n  imageType?: 'fixed' | 'fluid';\n  placeholderBG?: string;\n}\n\nconst PostCard: React.FunctionComponent<PostCardProps> = ({\n  image,\n  title,\n  description,\n  url,\n  date,\n  tags,\n  className,\n  imageType,\n  placeholderBG,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['post_card'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\n      {image == null ? null : (\n        <PostPreview className=\"post_preview\">\n          <Link to={url}>\n            {imageType === 'fluid' ? (\n              <Img\n                fluid={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            ) : (\n              <Img\n                fixed={image}\n                alt=\"post preview\"\n                backgroundColor={placeholderBG}\n              />\n            )}\n          </Link>\n        </PostPreview>\n      )}\n\n      <PostDetails className=\"post_details\">\n        {date && (\n          <PostDate\n            dangerouslySetInnerHTML={{\n              __html: date\n            }}\n            className=\"post_date\"\n          />\n        )}\n\n        <PostContent className=\"post_content\">\n          <PostTitle className=\"post_title\">\n            <Link to={url}>{title}</Link>\n          </PostTitle>\n          {description && (\n            <Excerpt\n              dangerouslySetInnerHTML={{\n                __html: description\n              }}\n              className=\"excerpt\"\n            />\n          )}\n\n          {tags == null ? null : (\n            <PostTags className=\"post_tags\">\n              {tags.map((tag: string, index: number) => (\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\n                  {`#${tag}`}\n                </Link>\n              ))}\n            </PostTags>\n          )}\n        </PostContent>\n      </PostDetails>\n    </PostCardWrapper>\n  );\n};\n\nPostCard.defaultProps = {\n  imageType: 'fluid'\n};\n\nexport default PostCard;\n"],"sourceRoot":""}